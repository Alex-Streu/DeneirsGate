@using DeneirsGate.Services
@using CustomHtmlHelpers
@model PlayerViewModel

@{
    ViewBag.Title = "Player Sheet";
    ViewBag.MenuOption = "Character";
}

<div class="user-header">
    <label class="text-large">@Model.UserName</label>
</div>

<div class="fancy-tabs" data-panes="player-panes">
    <div class="fancy-tab-item active" data-tab="player-sheet-pane">Character</div>
    <div class="fancy-tab-item" data-tab="weapons-pane">Weapons and Spells</div>
    <div class="fancy-tab-item" data-tab="inventory-pane">Inventory</div>
    <div class="fancy-tab-item" data-tab="backstory-pane">Backstory</div>
</div>


<div id="player-panes">
    <div id="player-sheet-pane" class="content-box player-sheet fancy-tab-pane slide-right active">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.UserKey)
        @Html.HiddenFor(model => model.CharacterKey)


        <div class="top-info">
            @Url.RenderPortraitUpload("Portrait", Model.Portrait, (Guid)ViewBag.CampaignKey, Model.CharacterKey)

            @HtmlHelpers.RenderFancyTextbox("lg", "FirstName", 50, Model.FirstName, "First Name", Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" }))

            @HtmlHelpers.RenderFancyTextbox("lg", "LastName", 50, Model.LastName, "Last Name", Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" }))

            @HtmlHelpers.RenderFancyNumberbox(1, 20, "xlg short center force-num", "Level", Model.Level.ToString(), "Level", Html.ValidationMessageFor(model => model.Level, "", new { @class = "text-danger" }))

        </div>
        <div class="content-area">
            <div class="attributes">
                <div class="attribute responsive-text" style="--size:1.25vw">
                    <label class="attr-label">Strength</label>
                    @HtmlHelpers.RenderFancyNumberbox(1, 30, "attr-stat center", "Strength", Model.Strength.ToString(), null, Html.ValidationMessageFor(model => model.Strength, "", new { @class = "text-danger" }))
                    <label class="attr-mod">+0</label>
                </div>
                <div class="attribute responsive-text" style="--size:1.25vw">
                    <label class="attr-label">Dexterity</label>
                    @HtmlHelpers.RenderFancyNumberbox(1, 30, "attr-stat center", "Dexterity", Model.Dexterity.ToString(), null, Html.ValidationMessageFor(model => model.Dexterity, "", new { @class = "text-danger" }))
                    <label class="attr-mod">+0</label>
                </div>
                <div class="attribute responsive-text" style="--size:1.25vw">
                    <label class="attr-label">Constitution</label>
                    @HtmlHelpers.RenderFancyNumberbox(1, 30, "attr-stat center", "Constitution", Model.Constitution.ToString(), null, Html.ValidationMessageFor(model => model.Constitution, "", new { @class = "text-danger" }))
                    <label class="attr-mod">+0</label>
                </div>
                <div class="attribute responsive-text" style="--size:1.25vw">
                    <label class="attr-label">Intelligence</label>
                    @HtmlHelpers.RenderFancyNumberbox(1, 30, "attr-stat center", "Intelligence", Model.Intelligence.ToString(), null, Html.ValidationMessageFor(model => model.Intelligence, "", new { @class = "text-danger" }))
                    <label class="attr-mod" data-abr="INT">+0</label>
                </div>
                <div class="attribute responsive-text" style="--size:1.25vw">
                    <label class="attr-label">Wisdom</label>
                    @HtmlHelpers.RenderFancyNumberbox(1, 30, "attr-stat center", "Wisdom", Model.Wisdom.ToString(), null, Html.ValidationMessageFor(model => model.Wisdom, "", new { @class = "text-danger" }))
                    <label class="attr-mod" data-abr="WIS">+0</label>
                </div>
                <div class="attribute responsive-text" style="--size:1.25vw">
                    <label class="attr-label">Charisma</label>
                    @HtmlHelpers.RenderFancyNumberbox(1, 30, "attr-stat center", "Charisma", Model.Charisma.ToString(), null, Html.ValidationMessageFor(model => model.Charisma, "", new { @class = "text-danger" }))
                    <label class="attr-mod" data-abr="CHA">+0</label>
                </div>
            </div>

            <div class="content">
                <div class="background">
                    <div class="fancy-dropdown">
                        @Html.LabelFor(model => model.RaceKey, htmlAttributes: new { @class = "control-label" })
                        @Html.DropDownListFor(model => model.RaceKey, HtmlHelpers.RaceDropdown(Model.RaceKey), new { @class = "form-control responsive-text", style="--size:0.75vw" })
                        @Html.ValidationMessageFor(model => model.RaceKey, "", new { @class = "text-danger" })
                    </div>

                    <div class="fancy-dropdown">
                        @Html.LabelFor(model => model.ClassKey, htmlAttributes: new { @class = "control-label" })
                        @Html.DropDownListFor(model => model.ClassKey, HtmlHelpers.ClassDropdown(Model.ClassKey), new { @class = "form-control responsive-text", style="--size:0.75vw" })
                        @Html.ValidationMessageFor(model => model.ClassKey, "", new { @class = "text-danger" })
                    </div>

                    <div class="fancy-dropdown">
                        @Html.LabelFor(model => model.BackgroundKey, htmlAttributes: new { @class = "control-label" })
                        @Html.DropDownListFor(model => model.BackgroundKey, HtmlHelpers.BackgroundDropdown(Model.BackgroundKey), new { @class = "form-control responsive-text", style="--size:0.75vw" })
                        @Html.ValidationMessageFor(model => model.BackgroundKey, "", new { @class = "text-danger" })
                    </div>

                    <div class="fancy-dropdown">
                        @Html.LabelFor(model => model.Alignment, htmlAttributes: new { @class = "control-label" })
                        @Html.DropDownListFor(model => model.Alignment, HtmlHelpers.AlignmentDropdown(Model.Alignment), new { @class = "form-control responsive-text", style="--size:0.75vw" })
                        @Html.ValidationMessageFor(model => model.Alignment, "", new { @class = "text-danger" })
                    </div>

                    @HtmlHelpers.RenderFancyNumberbox(1, 1000, "lg center force-num", "MaxHP", Model.MaxHP.ToString(), "Max HP", Html.ValidationMessageFor(model => model.MaxHP, "", new { @class = "text-danger" }))

                    @HtmlHelpers.RenderFancyNumberbox(1, 10, "lg center force-num", "Proficiency", Model.Proficiency.ToString(), "Proficiency", Html.ValidationMessageFor(model => model.Proficiency, "", new { @class = "text-danger" }))
                </div>

                <div class="textareas">
                    <div class="ability-status">
                        @HtmlHelpers.RenderFancyTextarea(null, "Abilities", 500, Model.Abilities, "Abilities", Html.ValidationMessageFor(model => model.Abilities, "", new { @class = "text-danger" }))

                        @HtmlHelpers.RenderFancyTextarea(null, "Status", 500, Model.Status, "Status", Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" }))
                    </div>

                    <div class="fear-ideal">
                        @HtmlHelpers.RenderFancyTextarea(null, "Fears", 500, Model.Fears, "Fears", Html.ValidationMessageFor(model => model.Fears, "", new { @class = "text-danger" }))

                        @HtmlHelpers.RenderFancyTextarea(null, "Ideals", 500, Model.Ideals, "Ideals", Html.ValidationMessageFor(model => model.Ideals, "", new { @class = "text-danger" }))

                        @HtmlHelpers.RenderFancyTextarea(null, "Languages", 500, Model.Languages, "Languages", Html.ValidationMessageFor(model => model.Languages, "", new { @class = "text-danger" }))
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="weapons-pane" class="content-box fancy-tab-pane slide-right">
        <div class="weapons-pane">
            <div class="weapons-side">
                <div class="armor-row">
                    @HtmlHelpers.RenderFancyTextbox("lg armor full", "Armor", 50, Model.Armor, "Armor", Html.ValidationMessageFor(model => model.Armor))

                    @HtmlHelpers.RenderFancyNumberbox(1, 30, "lg center", "ArmorClass", Model.ArmorClass.ToString(), "AC", Html.ValidationMessageFor(model => model.ArmorClass))
                </div>
                <div class="weapons">
                    <div class="weapons-label">
                        <div class="box-label text-md">Weapons</div>
                    </div>
                    <div class="weapons-list">
                        @for (var i = 0; i < 10; i++)
                        {
                            <div class="weapon-row responsive-text" style="--size:1vw">
                                @if (i >= Model.Weapons.Count)
                                {
                                    <input class="hidden weapon-key" type="text" value="@Guid.NewGuid()" />
                                    @HtmlHelpers.RenderFancyTextbox("name", null, 50, null, "Weapon")
                                    @HtmlHelpers.RenderFancyNumberbox(-10, 20, "attack-mod center", null, null, "ATK")
                                    @HtmlHelpers.RenderFancyTextbox("damage-dice", null, 10, null, "Damage")
                                    @HtmlHelpers.RenderFancyNumberbox(-10, 20, "damage-mod center", null, null, "DMG")
                                    <div class="fancy-dropdown damage-type">
                                        @Html.DropDownList($"DamageType{i}", HtmlHelpers.DamageTypeDropdown(Guid.Empty), new { @class = "form-control responsive-text", style="--size:0.75vw" })
                                    </div>
                                    <i class="fa fa-eraser delete"></i>
                                }
                                else
                                {
                                    var item = Model.Weapons.ElementAt(i);
                                    <input class="hidden weapon-key" type="text" value="@item.WeaponKey" />
                                    @HtmlHelpers.RenderFancyTextbox("name", null, 50, item.Name, "Weapon")
                                    @HtmlHelpers.RenderFancyNumberbox(-10, 20, "attack-mod center", null, item.AttackMod.ToString(), "ATK")
                                    @HtmlHelpers.RenderFancyTextbox("damage-dice", null, 10, item.DamageDice, "Damage")
                                    @HtmlHelpers.RenderFancyNumberbox(-10, 20, "damage-mod center", null, item.DamageMod.ToString(), "DMG")
                                    <div class="fancy-dropdown damage-type">
                                        @Html.DropDownList($"DamageType{i}", HtmlHelpers.DamageTypeDropdown(item.DamageType), new { @class = "form-control responsive-text", style="--size:0.75vw" })
                                    </div>
                                    <i class="fa fa-eraser delete"></i>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="spell-side">
                <div class="spellcasting-info">
                    <div class="fancy-dropdown">
                        @Html.LabelFor(model => model.SpellcastingAbility, htmlAttributes: new { @class = "control-label" })
                        @Html.DropDownList("SpellcastingAbility", HtmlHelpers.SpellcastingAbilityDropdown(Model.SpellcastingAbility), "None", new { @class = "form-control responsive-text", style = "--size:1vw" })
                    </div>

                    @HtmlHelpers.RenderFancyNumberbox(0, 20, "lg medium center force-num", "SpellSaveDC", Model.SpellSaveDC.ToString(), "Save DC")

                    @HtmlHelpers.RenderFancyNumberbox(0, 20, "lg medium center force-num", "SpellcastingMod", Model.SpellcastingMod.ToString(), "Spell Attack")

                    @HtmlHelpers.RenderFancyNumberbox(0, 50, "lg medium center force-num", "SpellsPerDay", Model.SpellsPerDay.ToString(), "Spells Per Day")
                </div>
                <div class="spell-content">
                    <div class="spell-column">
                        <div class="spell-column-title">
                            <label>Cantrips</label>
                            @HtmlHelpers.RenderFancyNumberbox(0, 10, "lg center medium force-num", "Cantrips", Model.Cantrips.ToString(), null)
                        </div>

                        @for (var i = 0; i < 8; i++)
                        {
                            <div class="spell-row" data-level="0">
                                @{ var spells = Model.Spells.Where(x => x.Level == 0).ToList(); }
                                @if (i < spells.Count())
                                {
                                    <input class="hidden spell-key" value="@spells.ElementAt(i).SpellKey" />
                                    @HtmlHelpers.RenderFancyTextbox("sm full spell", null, 50, spells.ElementAt(i).Name, null)
                                }
                                else
                                {
                                    <input class="hidden spell-key" value="@Guid.NewGuid()" />
                                    @HtmlHelpers.RenderFancyTextbox("sm full spell", null, 50, null, null)
                                }
                                <i class="fa fa-eraser delete"></i>
                            </div>
                        }

                        <div class="spell-column-title">
                            <label>Level 1</label>
                            @HtmlHelpers.RenderFancyNumberbox(0, 10, "lg center medium force-num", "Level1Spells", Model.Level1Spells.ToString(), null)
                        </div>

                        @for (var i = 0; i < 13; i++)
                        {
                            <div class="spell-row" data-level="1">
                                @{ var spells = Model.Spells.Where(x => x.Level == 1).ToList(); }
                                @if (i < spells.Count())
                                {
                                    <input class="hidden spell-key" value="@spells.ElementAt(i).SpellKey" />
                                    @HtmlHelpers.RenderFancyTextbox("sm full spell", null, 50, spells.ElementAt(i).Name, null)
                                }
                                else
                                {
                                    <input class="hidden spell-key" value="@Guid.NewGuid()" />
                                    @HtmlHelpers.RenderFancyTextbox("sm full spell", null, 50, null, null)
                                }
                                <i class="fa fa-eraser delete"></i>
                            </div>
                        }

                        <div class="spell-column-title">
                            <label>Level 2</label>
                            @HtmlHelpers.RenderFancyNumberbox(0, 10, "lg center medium force-num", "Level2Spells", Model.Level2Spells.ToString(), null)
                        </div>

                        @for (var i = 0; i < 13; i++)
                        {
                            <div class="spell-row" data-level="2">
                                @{ var spells = Model.Spells.Where(x => x.Level == 2).ToList(); }
                                @if (i < spells.Count())
                                {
                                    <input class="hidden spell-key" value="@spells.ElementAt(i).SpellKey" />
                                    @HtmlHelpers.RenderFancyTextbox("sm full spell", null, 50, spells.ElementAt(i).Name, null)
                                }
                                else
                                {
                                    <input class="hidden spell-key" value="@Guid.NewGuid()" />
                                    @HtmlHelpers.RenderFancyTextbox("sm full spell", null, 50, null, null)
                                }
                                <i class="fa fa-eraser delete"></i>
                            </div>
                        }
                    </div>
                    <div class="spell-column border">
                        <div class="spell-column-title">
                            <label>Level 3</label>
                            @HtmlHelpers.RenderFancyNumberbox(0, 10, "lg center medium force-num", "Level3Spells", Model.Level3Spells.ToString(), null)
                        </div>

                        @for (var i = 0; i < 13; i++)
                        {
                            <div class="spell-row" data-level="3">
                                @{ var spells = Model.Spells.Where(x => x.Level == 3).ToList(); }
                                @if (i < spells.Count())
                                {
                                    <input class="hidden spell-key" value="@spells.ElementAt(i).SpellKey" />
                                    @HtmlHelpers.RenderFancyTextbox("sm full spell", null, 50, spells.ElementAt(i).Name, null)
                                }
                                else
                                {
                                    <input class="hidden spell-key" value="@Guid.NewGuid()" />
                                    @HtmlHelpers.RenderFancyTextbox("sm full spell", null, 50, null, null)
                                }
                                <i class="fa fa-eraser delete"></i>
                            </div>
                        }

                        <div class="spell-column-title">
                            <label>Level 4</label>
                            @HtmlHelpers.RenderFancyNumberbox(0, 10, "lg center medium force-num", "Level4Spells", Model.Level4Spells.ToString(), null)
                        </div>

                        @for (var i = 0; i < 13; i++)
                        {
                            <div class="spell-row" data-level="4">
                                @{ var spells = Model.Spells.Where(x => x.Level == 4).ToList(); }
                                @if (i < spells.Count())
                                {
                                    <input class="hidden spell-key" value="@spells.ElementAt(i).SpellKey" />
                                    @HtmlHelpers.RenderFancyTextbox("sm full spell", null, 50, spells.ElementAt(i).Name, null)
                                }
                                else
                                {
                                    <input class="hidden spell-key" value="@Guid.NewGuid()" />
                                    @HtmlHelpers.RenderFancyTextbox("sm full spell", null, 50, null, null)
                                }
                                <i class="fa fa-eraser delete"></i>
                            </div>
                        }

                        <div class="spell-column-title">
                            <label>Level 5</label>
                            @HtmlHelpers.RenderFancyNumberbox(0, 10, "lg center medium force-num", "Level5Spells", Model.Level5Spells.ToString(), null)
                        </div>

                        @for (var i = 0; i < 9; i++)
                        {
                            <div class="spell-row" data-level="5">
                                @{ var spells = Model.Spells.Where(x => x.Level == 5).ToList(); }
                                @if (i < spells.Count())
                                {
                                    <input class="hidden spell-key" value="@spells.ElementAt(i).SpellKey" />
                                    @HtmlHelpers.RenderFancyTextbox("sm full spell", null, 50, spells.ElementAt(i).Name, null)
                                }
                                else
                                {
                                    <input class="hidden spell-key" value="@Guid.NewGuid()" />
                                    @HtmlHelpers.RenderFancyTextbox("sm full spell", null, 50, null, null)
                                }
                                <i class="fa fa-eraser delete"></i>
                            </div>
                        }
                    </div>
                    <div class="spell-column border">
                        <div class="spell-column-title">
                            <label>Level 6</label>
                            @HtmlHelpers.RenderFancyNumberbox(0, 10, "lg center medium force-num", "Level6Spells", Model.Level6Spells.ToString(), null)
                        </div>

                        @for (var i = 0; i < 9; i++)
                        {
                            <div class="spell-row" data-level="6">
                                @{ var spells = Model.Spells.Where(x => x.Level == 6).ToList(); }
                                @if (i < spells.Count())
                                {
                                    <input class="hidden spell-key" value="@spells.ElementAt(i).SpellKey" />
                                    @HtmlHelpers.RenderFancyTextbox("sm full spell", null, 50, spells.ElementAt(i).Name, null)
                                }
                                else
                                {
                                    <input class="hidden spell-key" value="@Guid.NewGuid()" />
                                    @HtmlHelpers.RenderFancyTextbox("sm full spell", null, 50, null, null)
                                }
                                <i class="fa fa-eraser delete"></i>
                            </div>
                        }

                        <div class="spell-column-title">
                            <label>Level 7</label>
                            @HtmlHelpers.RenderFancyNumberbox(0, 10, "lg center medium force-num", "Level7Spells", Model.Level7Spells.ToString(), null)
                        </div>

                        @for (var i = 0; i < 9; i++)
                        {
                            <div class="spell-row" data-level="7">
                                @{ var spells = Model.Spells.Where(x => x.Level == 7).ToList(); }
                                @if (i < spells.Count())
                                {
                                    <input class="hidden spell-key" value="@spells.ElementAt(i).SpellKey" />
                                    @HtmlHelpers.RenderFancyTextbox("sm full spell", null, 50, spells.ElementAt(i).Name, null)
                                }
                                else
                                {
                                    <input class="hidden spell-key" value="@Guid.NewGuid()" />
                                    @HtmlHelpers.RenderFancyTextbox("sm full spell", null, 50, null, null)
                                }
                                <i class="fa fa-eraser delete"></i>
                            </div>
                        }

                        <div class="spell-column-title">
                            <label>Level 8</label>
                            @HtmlHelpers.RenderFancyNumberbox(0, 10, "lg center medium force-num", "Level8Spells", Model.Level8Spells.ToString(), null)
                        </div>

                        @for (var i = 0; i < 7; i++)
                        {
                            <div class="spell-row" data-level="8">
                                @{ var spells = Model.Spells.Where(x => x.Level == 8).ToList(); }
                                @if (i < spells.Count())
                                {
                                    <input class="hidden spell-key" value="@spells.ElementAt(i).SpellKey" />
                                    @HtmlHelpers.RenderFancyTextbox("sm full spell", null, 50, spells.ElementAt(i).Name, null)
                                }
                                else
                                {
                                    <input class="hidden spell-key" value="@Guid.NewGuid()" />
                                    @HtmlHelpers.RenderFancyTextbox("sm full spell", null, 50, null, null)
                                }
                                <i class="fa fa-eraser delete"></i>
                            </div>
                        }

                        <div class="spell-column-title">
                            <label>Level 9</label>
                            @HtmlHelpers.RenderFancyNumberbox(0, 10, "lg center medium force-num", "Level9Spells", Model.Level9Spells.ToString(), null)
                        </div>

                        @for (var i = 0; i < 7; i++)
                        {
                            <div class="spell-row" data-level="9">
                                @{ var spells = Model.Spells.Where(x => x.Level == 9).ToList(); }
                                @if (i < spells.Count())
                                {
                                    <input class="hidden spell-key" value="@spells.ElementAt(i).SpellKey" />
                                    @HtmlHelpers.RenderFancyTextbox("sm full spell", null, 50, spells.ElementAt(i).Name, null)
                                }
                                else
                                {
                                    <input class="hidden spell-key" value="@Guid.NewGuid()" />
                                    @HtmlHelpers.RenderFancyTextbox("sm full spell", null, 50, null, null)
                                }
                                <i class="fa fa-eraser delete"></i>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="inventory-pane" class="content-box fancy-tab-pane slide-right">
        <div class="inventory-pane">
            <div class="coins">
                <div class="coin">
                    <label>Copper</label>
                    @HtmlHelpers.RenderFancyNumberbox(0, 1000000, "medium center force-num", "Copper", Model.Copper.ToString(), null)
                </div>
                <div class="coin">
                    <label>Silver</label>
                    @HtmlHelpers.RenderFancyNumberbox(0, 1000000, "medium center force-num", "Silver", Model.Silver.ToString(), null)
                </div>
                <div class="coin">
                    <label>Electrum</label>
                    @HtmlHelpers.RenderFancyNumberbox(0, 1000000, "medium center force-num", "Electrum", Model.Electrum.ToString(), null)
                </div>
                <div class="coin">
                    <label>Gold</label>
                    @HtmlHelpers.RenderFancyNumberbox(0, 1000000, "medium center force-num", "Gold", Model.Gold.ToString(), null)
                </div>
                <div class="coin">
                    <label>Platinum</label>
                    @HtmlHelpers.RenderFancyNumberbox(0, 1000000, "medium center force-num", "Platinum", Model.Platinum.ToString(), null)
                </div>
            </div>
            <div class="inventory">
                @HtmlHelpers.RenderFancyTextarea("full lg", "Inventory", null, Model.Inventory, "Inventory")
            </div>
        </div>
    </div>
    <div id="backstory-pane" class="fancy-tab-pane slide-right">
        <div id="backstory-editor">
            @Html.Raw(Model.Backstory)
        </div>
    </div>
</div>

<div class="submit-footer">
    <div class="btn btn-lg btn-default save-button" onclick="save()">Save</div>
    <div id="delete" class="btn btn-lg btn-danger save-button" onclick="promptDelete('deleteCharacter()')">Delete</div>
</div>

@section scripts {
    <script src="https://cdn.ckeditor.com/ckeditor5/16.0.0/classic/ckeditor.js"></script>
    <script type="text/javascript">
        var updatePlayerAction = '@Url.Action("UpdatePlayer")';
        var updateCharacterAction = '@Url.Action("UpdateCharacter")';
        var deleteCharacterAction = '@Url.Action("DeleteCharacter")';
        var indexAction = '@Url.Action("/")';
        var registerPlayerAction = '@Url.Action("RegisterPlayer", "Account", new { id = Model.UserCode }, this.Request.Url.Scheme)';
        var isPlayer = ('@ViewBag.IsPlayer' == 'True');
        var backstory;

        $(document).ready(function () {
            if ('@ViewBag.IsNew' == 'True') { $('#delete').hide(); }

            ClassicEditor
                .create(document.querySelector('#backstory-editor'), {
                    toolbar: ['heading', '|', 'bold', 'italic', 'bulletedList', 'numberedList', '|', 'indent', 'outdent', '|', 'blockQuote', 'insertTable', 'undo', 'redo' ]
                })
                .then(newEditor => {
                    backstory = newEditor;
                })
                .catch(error => {
                    console.error(error);
                });

            $('.attribute').each(function () {
                calculateMod(this);
            })
        })



        /********************** Calculating Spellcasting ******************************/
        function calculateSpellcasting() {
            var ability = $('#SpellcastingAbility').val();
            if (isEmpty(ability)) {
                $('#SpellSaveDC').val(0);
                $('#SpellcastingMod').val(0);
                return;
            }

            var proficiency = parseInt($('#Proficiency').val());
            var mod = parseInt($(`.attr-mod[data-abr=${ability}]`).text());

            $('#SpellSaveDC').val(8 + proficiency + mod);
            $('#SpellcastingMod').val(proficiency + mod);
        }

        $('#SpellcastingAbility').change(function () {
            calculateSpellcasting();
        })

        $('#Proficiency').change(function () {
            calculateSpellcasting();
        })

        $('.attr-stat').change(function () {
            calculateSpellcasting();
        })



        /********************** Calculating Numbers ******************************/
        $('.attr-stat input').blur(function () {
            forceNumValue(this);
            calculateMod($(this).parentsUntil('.attribute').parent());
        })

        $('.attr-stat input').bind('mouseup', function () {
            calculateMod($(this).parentsUntil('.attribute').parent());
        });

        $('.force-num input').blur(function () {
            forceNumValue(this);
        });

        function forceNumValue(attr) {
            var val = $(attr).val();
            var min = parseInt($(attr).attr('min'));
            var max = parseInt($(attr).attr('max'));
            if (isEmpty(val)) {
                val = min;
            }
            val = Math.min(Math.max(val, min), max);

            $(attr).val(val);
        }


        function calculateMod(attr) {
            var val = $(attr).find('.attr-stat input').val();
            if (val % 2 > 0) { val -= 1; }

            var mod = (val - 10) / 2;
            var result = mod.toString();

            if (mod >= 0) { result = '+' + result; }

            $(attr).find('.attr-mod').text(result);
        }



        /********************** Interactive Functionality ******************************/
        $('.weapon-row .delete').click(function () {
            $(this).parent().find('*').each(function () {
                if ($(this).hasClass('weapon-key')) { return; }

                $(this).val('');
            })
        })

        $('.spell-row .delete').click(function () {
            $(this).parent().find('*').each(function () {
                if ($(this).hasClass('spell-key')) { return; }

                $(this).val('');
            })
        })



        /********************** Active Classes ******************************/
        $('.attr-stat input').focus(function () {
            $(this).parentsUntil('.attributes').parent().addClass('active');
            $(this).parentsUntil('.attribute').parent().addClass('active');
        })

        $('.attr-stat input').blur(function () {
            $(this).parentsUntil('.attributes').parent().removeClass('active');
            $(this).parentsUntil('.attribute').parent().removeClass('active');
        })

        $('.weapons-list *').focus(function () {
            $(this).parentsUntil('.weapons-list').parent().addClass('active');
        })

        $('.weapons-list *').blur(function () {
            $(this).parentsUntil('.weapons-list').parent().removeClass('active');
        })

        $('.spell-column-title *').focus(function () {
            $(this).parentsUntil('.spell-column-title').parent().addClass('active');
        })

        $('.spell-column-title *').blur(function () {
            $(this).parentsUntil('.spell-column-title').parent().removeClass('active');
        })

        $('.coin *').focus(function () {
            $(this).parentsUntil('.coin').parent().addClass('active');
        })

        $('.coin *').blur(function () {
            $(this).parentsUntil('.coin').parent().removeClass('active');
        })



        /********************** Saving ******************************/
        function save() {
            var weapons = [];
            $('.weapon-row').each(function () {
                var name = $(this).find('.name input').val();
                if (!isEmpty(name)) {
                    weapons.push({
                        WeaponKey: $(this).find('.weapon-key').val(),
                        Name: name,
                        AttackMod: $(this).find('.attack-mod input').val(),
                        DamageDice: $(this).find('.damage-dice input').val(),
                        DamageMod: $(this).find('.damage-mod input').val(),
                        DamageType: $(this).find('.damage-type select').val()
                    })
                }
            })

            var spells = [];
            $('.spell-row').each(function () {
                var name = $(this).find('.spell input').val();
                if (!isEmpty(name)) {
                    spells.push({
                        SpellKey: $(this).find('.spell-key').val(),
                        Name: name,
                        Level: $(this).data('level')
                    })
                }
            })

            var postData = {
                UserKey: $('#UserKey').val(),
                Level: $('#Level').val(),
                MaxHP: $('#MaxHP').val(),
                Proficiency: $('#Proficiency').val(),
                Strength: $('#Strength').val(),
                Dexterity: $('#Dexterity').val(),
                Constitution: $('#Constitution').val(),
                Intelligence: $('#Intelligence').val(),
                Wisdom: $('#Wisdom').val(),
                Charisma: $('#Charisma').val(),
                Abilities: $('#Abilities').val(),
                Status: $('#Status').val(),
                CharacterKey: $('#CharacterKey').val(),
                FirstName: $('#FirstName').val(),
                LastName: $('#LastName').val(),
                Portrait: $('#Portrait').val(),
                RaceKey: $('#RaceKey').val(),
                ClassKey: $('#ClassKey').val(),
                BackgroundKey: $('#BackgroundKey').val(),
                Fears: $('#Fears').val(),
                Ideals: $('#Ideals').val(),
                Backstory: backstory.getData(),
                Languages: $('#Languages').val(),
                Alignment: $('#Alignment').val(),
                Armor: $('#Armor').val(),
                ArmorClass: $('#ArmorClass').val(),
                SpellcastingAbility: $('#SpellcastingAbility').val(),
                SpellSaveDC: $('#SpellSaveDC').val(),
                SpellcastingMod: $('#SpellcastingMod').val(),
                SpellsPerDay: $('#SpellsPerDay').val(),
                Cantrips: $('#Cantrips').val(),
                Level1Spells: $('#Level1Spells').val(),
                Level2Spells: $('#Level2Spells').val(),
                Level3Spells: $('#Level3Spells').val(),
                Level4Spells: $('#Level4Spells').val(),
                Level5Spells: $('#Level5Spells').val(),
                Level6Spells: $('#Level6Spells').val(),
                Level7Spells: $('#Level7Spells').val(),
                Level8Spells: $('#Level8Spells').val(),
                Level9Spells: $('#Level9Spells').val(),
                Copper: $('#Copper').val(),
                Silver: $('#Silver').val(),
                Electrum: $('#Electrum').val(),
                Gold: $('#Gold').val(),
                Platinum: $('#Platinum').val(),
                Inventory: $('#Inventory').val(),
                Weapons: weapons,
                Spells: spells
            }
            
            var url = isPlayer ? updatePlayerAction : updateCharacterAction;

            $.ajax({
                type: "POST",
                url: url,
                data: JSON.stringify(postData),
                dataType: 'json',
                contentType: 'application/json',
                success: function (data) {
                    if (data.success) {
                        Notiflix.NotifyContent.Success(data.message);
                        $('#delete').show();
                        uploadImage($('#Portrait').parent().find('.uploader'), 'Characters/' + $('#CharacterKey').val(), $('#Portrait').val());
                    } else {
                        Notiflix.NotifyContent.Failure(data.message);
                    }
                },
                error: function (error) {
                    Notiflix.NotifyContent.Failure(error.responseText);
                }
            })
        }

        function deleteCharacter() {
            var postData = { id: '@Model.CharacterKey' };

            $.ajax({
                type: "POST",
                url: deleteCharacterAction,
                data: JSON.stringify(postData),
                dataType: 'json',
                contentType: 'application/json',
                success: function (data) {
                    if (data.success) {
                        Notiflix.NotifyContent.Success(data.message);
                        location.replace(indexAction);
                    } else {
                        Notiflix.NotifyContent.Failure(data.message);
                    }
                },
                error: function (error) {
                    Notiflix.NotifyContent.Failure(error.responseText);
                }
            })
        }
    </script>

}